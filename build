#!/bin/bash

# Bomb out on any errors
set -e

# Setup the environment
export HOME=/home/admin
export PATH=$PATH:$HOME/droid/bin
export ANDROID_NDK=~/droid/android-ndk
export TARGET=/target

# Download the latest version of bash
if [ ! -f ~/bash-5.3.tar.gz ]; then
    wget -O ~/bash-5.3.tar.gz http://ftp.gnu.org/gnu/bash/bash-5.3.tar.gz
fi

if [ ! -d $HOME/official_53_patches ]; then
    mkdir $HOME/official_53_patches
    for ((i=1; i<=3; i++)); do
        wget -O $HOME/official_53_patches/bash53-00$i http://ftp.gnu.org/gnu/bash/bash-5.3-patches/bash53-00$i
    done
fi

for ARCH_NAME in armv7a aarch64 x86 x86_64; do

    for BIN_TYPE in pie; do

        # Create the output directory
        mkdir -p $TARGET/$ARCH_NAME/$BIN_TYPE;

        # Start each build with a fresh source copy
        cd ~
        rm -rf ~/bash-5.3
        tar xvzf bash-5.3.tar.gz
        cd bash-5.3

        # Apply the Android patch - DISABLED - Not sure if needed for bash 5.3?
        #patch -p0 <~/bash-android.patch

        # Apply all official patches
        for PATCH in $HOME/official_53_patches/bash53-*; do
            patch -p0 < $PATCH
        done;

        case "$ARCH_NAME" in

            x86)
                echo "Compiling for x86"
                HOST=i686-linux-android
                TOOLCHAIN=${ANDROID_NDK}/toolchains/llvm/prebuilt/linux-x86_64/
                COMPILER=${TOOLCHAIN}/bin/i686-linux-android35-clang
                STRIP=${TOOLCHAIN}/bin/llvm-strip
                #SYSROOT=${ANDROID_NDK}/platforms/android-19/arch-x86
                ;;
            x86_64)
                echo "Compiling for x86_64"
                HOST=x86_64-linux-android
                TOOLCHAIN=${ANDROID_NDK}/toolchains/llvm/prebuilt/linux-x86_64/
                COMPILER=${TOOLCHAIN}/bin/x86_64-linux-android35-clang
                STRIP=${TOOLCHAIN}/bin/llvm-strip
                #SYSROOT=${ANDROID_NDK}/platforms/android-19/arch-x86
                ;;
            armv7a)
                echo "Compiling for armeaba-v7a"
                HOST=arm-linux-androideabi
                TOOLCHAIN=${ANDROID_NDK}/toolchains/llvm/prebuilt/linux-x86_64/
                COMPILER=${TOOLCHAIN}/bin/armv7a-linux-androideabi35-clang
                STRIP=${TOOLCHAIN}/bin/llvm-strip
                #SYSROOT=${ANDROID_NDK}/platforms/android-19/arch-arm
                ;;
            aarch64)
                echo "Compiling for arm64-v8a"
                HOST=aarch64-linux-android
                TOOLCHAIN=${ANDROID_NDK}/toolchains/llvm/prebuilt/linux-x86_64/
                COMPILER=${TOOLCHAIN}/bin/aarch64-linux-android35-clang
                STRIP=${TOOLCHAIN}/bin/llvm-strip
                #SYSROOT=${ANDROID_NDK}/platforms/android-19/arch-arm
                ;;

        esac

        export CC="$COMPILER" # --sysroot=$SYSROOT"

        if [ $BIN_TYPE == "pie" ]; then
            export CFLAGS="-g -O2 -pie -fPIE"
            # Use the default platform target for pie binaries
            unset GOOGLE_PLATFORM
        else
            export CFLAGS="-g -O2"
            export GOOGLE_PLATFORM=9
        fi

        ./configure --host=$HOST --without-bash-malloc --disable-rpath --disable-nls
        echo "#undef HAVE_GETPWENT" >> config.h

        make

        $STRIP bash
        cp bash $TARGET/$ARCH_NAME/$BIN_TYPE/bash

    done

done
